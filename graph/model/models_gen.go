// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Journey struct {
	ID       string        `json:"id"`
	User     *User         `json:"user"`
	Status   JourneyStatus `json:"status"`
	Position *Position     `json:"position"`
}

type NewPosition struct {
	Lat float64 `json:"lat"`
	Lng float64 `json:"lng"`
}

type Position struct {
	Lat float64 `json:"lat"`
	Lng float64 `json:"lng"`
}

type UpdateJourneyPosition struct {
	ID       string       `json:"id"`
	Position *NewPosition `json:"position"`
}

type UpdateJourneyStatus struct {
	ID     string        `json:"id"`
	Status JourneyStatus `json:"status"`
}

type User struct {
	ID string `json:"id"`
}

type JourneyStatus string

const (
	JourneyStatusActive   JourneyStatus = "ACTIVE"
	JourneyStatusComplete JourneyStatus = "COMPLETE"
)

var AllJourneyStatus = []JourneyStatus{
	JourneyStatusActive,
	JourneyStatusComplete,
}

func (e JourneyStatus) IsValid() bool {
	switch e {
	case JourneyStatusActive, JourneyStatusComplete:
		return true
	}
	return false
}

func (e JourneyStatus) String() string {
	return string(e)
}

func (e *JourneyStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = JourneyStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid JourneyStatus", str)
	}
	return nil
}

func (e JourneyStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
